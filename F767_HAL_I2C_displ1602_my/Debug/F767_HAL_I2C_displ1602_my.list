
F767_HAL_I2C_displ1602_my.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f38  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b8  080041b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000000c  080041cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  080041cc  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010423  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000217c  00000000  00000000  0003045d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  000325e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  000333c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282c8  00000000  00000000  00034098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba18  00000000  00000000  0005c360  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb940  00000000  00000000  00067d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001636b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e0  00000000  00000000  00163734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004118 	.word	0x08004118

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004118 	.word	0x08004118

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <I2C_send>:
}


// функция для отправки данных, data - сами данные, flags - 1 (отправка данных) или 0 (отправка команд)
void I2C_send(uint8_t data, uint8_t flags)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af02      	add	r7, sp, #8
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	    for(;;) {                                                                     // бесконечный цикл
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	2201      	movs	r2, #1
 800054e:	214e      	movs	r1, #78	; 0x4e
 8000550:	4820      	ldr	r0, [pc, #128]	; (80005d4 <I2C_send+0x9c>)
 8000552:	f001 f923 	bl	800179c <HAL_I2C_IsDeviceReady>
 8000556:	4603      	mov	r3, r0
 8000558:	73fb      	strb	r3, [r7, #15]
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d000      	beq.n	8000562 <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8000560:	e7f2      	b.n	8000548 <I2C_send+0x10>
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 8000562:	bf00      	nop
	    }

	uint8_t up = data & 0xF0;                 // операция И с 1111 0000, приводит к обнулению последних бит с 0 по 3, остаются биты с 4 по 7
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	f023 030f 	bic.w	r3, r3, #15
 800056a:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;          // тоже самое, но data сдвигается на 4 бита влево, т.е. в этой
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	737b      	strb	r3, [r7, #13]
	                                           // переменной остаются  биты с 0 по 3
	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;  // 4-7 биты содержат информацию, биты 0-3 конфигурируют работу
 8000572:	7bba      	ldrb	r2, [r7, #14]
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	4313      	orrs	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f043 030c 	orr.w	r3, r3, #12
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;         // ублирование сигнала, на выводе Е в этот раз 0
 8000582:	7bba      	ldrb	r2, [r7, #14]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	4313      	orrs	r3, r2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	b2db      	uxtb	r3, r3
 8000590:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000592:	7b7a      	ldrb	r2, [r7, #13]
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	4313      	orrs	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 80005a2:	7b7a      	ldrb	r2, [r7, #13]
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80005b2:	f107 0208 	add.w	r2, r7, #8
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2304      	movs	r3, #4
 80005be:	214e      	movs	r1, #78	; 0x4e
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <I2C_send+0x9c>)
 80005c2:	f000 fff7 	bl	80015b4 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 80005c6:	2005      	movs	r0, #5
 80005c8:	f000 fc98 	bl	8000efc <HAL_Delay>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000a8 	.word	0x200000a8

080005d8 <LCD_SendString>:


void LCD_SendString(char *str)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    // *char по сути является строкой
	while(*str) {                                   // пока строчка не закончится
 80005e0:	e008      	b.n	80005f4 <LCD_SendString+0x1c>
		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2101      	movs	r1, #1
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffa5 	bl	8000538 <I2C_send>
        str++;                                      // сдвиг строки налево на 1 символ
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
	while(*str) {                                   // пока строчка не закончится
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f2      	bne.n	80005e2 <LCD_SendString+0xa>
    }
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fc1b 	bl	8000e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f840 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9a6 	bl	8000960 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 8000614:	f000 f946 	bl	80008a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000618:	f000 f974 	bl	8000904 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800061c:	f000 f8d2 	bl	80007c4 <MX_I2C1_Init>
  MX_UART5_Init();
 8000620:	f000 f910 	bl	8000844 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  I2C_send(0b00110000,0);   // 8ми битный интерфейс
 8000624:	2100      	movs	r1, #0
 8000626:	2030      	movs	r0, #48	; 0x30
 8000628:	f7ff ff86 	bl	8000538 <I2C_send>
  I2C_send(0b00000010,0);   // установка курсора в начале строки
 800062c:	2100      	movs	r1, #0
 800062e:	2002      	movs	r0, #2
 8000630:	f7ff ff82 	bl	8000538 <I2C_send>
  I2C_send(0b00001100,0);   // нормальный режим работы
 8000634:	2100      	movs	r1, #0
 8000636:	200c      	movs	r0, #12
 8000638:	f7ff ff7e 	bl	8000538 <I2C_send>
  I2C_send(0b00000001,0);   // очистка дисплея
 800063c:	2100      	movs	r1, #0
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff ff7a 	bl	8000538 <I2C_send>

  /* USER CODE END 2 */
  I2C_send(0b10000000,0);   // переход на 1 строку, тут не обязателен
 8000644:	2100      	movs	r1, #0
 8000646:	2080      	movs	r0, #128	; 0x80
 8000648:	f7ff ff76 	bl	8000538 <I2C_send>
  LCD_SendString("  Hello Habr");
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0x7c>)
 800064e:	f7ff ffc3 	bl	80005d8 <LCD_SendString>
  I2C_send(0b11000000,0);   // переход на 2 строку
 8000652:	2100      	movs	r1, #0
 8000654:	20c0      	movs	r0, #192	; 0xc0
 8000656:	f7ff ff6f 	bl	8000538 <I2C_send>
  LCD_SendString(" STM32 + LCD 1602");
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0x80>)
 800065c:	f7ff ffbc 	bl	80005d8 <LCD_SendString>
  I2C_send(0b10010100,0);   // переход на 3 строку
 8000660:	2100      	movs	r1, #0
 8000662:	2094      	movs	r0, #148	; 0x94
 8000664:	f7ff ff68 	bl	8000538 <I2C_send>
  LCD_SendString(" +LCD 2004A");
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <main+0x84>)
 800066a:	f7ff ffb5 	bl	80005d8 <LCD_SendString>
  I2C_send(0b11010100,0);   // переход на 4 строку
 800066e:	2100      	movs	r1, #0
 8000670:	20d4      	movs	r0, #212	; 0xd4
 8000672:	f7ff ff61 	bl	8000538 <I2C_send>
  LCD_SendString(" library HAL");
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <main+0x88>)
 8000678:	f7ff ffae 	bl	80005d8 <LCD_SendString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x78>
 800067e:	bf00      	nop
 8000680:	08004158 	.word	0x08004158
 8000684:	08004168 	.word	0x08004168
 8000688:	0800417c 	.word	0x0800417c
 800068c:	08004188 	.word	0x08004188

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0b8      	sub	sp, #224	; 0xe0
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fd32 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2290      	movs	r2, #144	; 0x90
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fd23 	bl	8004108 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006c2:	f001 fcc7 	bl	8002054 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <SystemClock_Config+0x128>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a3b      	ldr	r2, [pc, #236]	; (80007b8 <SystemClock_Config+0x128>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <SystemClock_Config+0x128>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006de:	4b37      	ldr	r3, [pc, #220]	; (80007bc <SystemClock_Config+0x12c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a36      	ldr	r2, [pc, #216]	; (80007bc <SystemClock_Config+0x12c>)
 80006e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <SystemClock_Config+0x12c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000718:	23d8      	movs	r3, #216	; 0xd8
 800071a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000724:	2309      	movs	r3, #9
 8000726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fcf0 	bl	8002114 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073a:	f000 f9b3 	bl	8000aa4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073e:	f001 fc99 	bl	8002074 <HAL_PWREx_EnableOverDrive>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000748:	f000 f9ac 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800076e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000772:	2107      	movs	r1, #7
 8000774:	4618      	mov	r0, r3
 8000776:	f001 ff7b 	bl	8002670 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000780:	f000 f990 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <SystemClock_Config+0x130>)
 8000786:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000790:	2300      	movs	r3, #0
 8000792:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f95e 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80007aa:	f000 f97b 	bl	8000aa4 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	37e0      	adds	r7, #224	; 0xe0
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000
 80007c0:	00204500 	.word	0x00204500

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C1_Init+0x74>)
 8000800:	f000 fe48 	bl	8001494 <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 f94b 	bl	8000aa4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C1_Init+0x74>)
 8000812:	f001 fa3f 	bl	8001c94 <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 f942 	bl	8000aa4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C1_Init+0x74>)
 8000824:	f001 fa81 	bl	8001d2a <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f939 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000a8 	.word	0x200000a8
 800083c:	40005400 	.word	0x40005400
 8000840:	20404768 	.word	0x20404768

08000844 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_UART5_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <MX_UART5_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_UART5_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_UART5_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_UART5_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_UART5_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_UART5_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_UART5_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_UART5_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_UART5_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_UART5_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_UART5_Init+0x58>)
 8000888:	f002 fd10 	bl	80032ac <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f907 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200004f8 	.word	0x200004f8
 80008a0:	40005000 	.word	0x40005000

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_USART3_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008e8:	f002 fce0 	bl	80032ac <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 f8d7 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000028 	.word	0x20000028
 8000900:	40004800 	.word	0x40004800

08000904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800090e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2206      	movs	r2, #6
 8000914:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2202      	movs	r2, #2
 8000926:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2201      	movs	r2, #1
 800092c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2201      	movs	r2, #1
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	f001 fa3b 	bl	8001dc2 <HAL_PCD_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f8a7 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000f4 	.word	0x200000f4

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b46      	ldr	r3, [pc, #280]	; (8000a90 <MX_GPIO_Init+0x130>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a45      	ldr	r2, [pc, #276]	; (8000a90 <MX_GPIO_Init+0x130>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x130>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <MX_GPIO_Init+0x130>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a3f      	ldr	r2, [pc, #252]	; (8000a90 <MX_GPIO_Init+0x130>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <MX_GPIO_Init+0x130>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a39      	ldr	r2, [pc, #228]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_GPIO_Init+0x130>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a0c:	4821      	ldr	r0, [pc, #132]	; (8000a94 <MX_GPIO_Init+0x134>)
 8000a0e:	f000 fd27 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <MX_GPIO_Init+0x138>)
 8000a18:	f000 fd22 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_GPIO_Init+0x13c>)
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <MX_GPIO_Init+0x140>)
 8000a32:	f000 fb6b 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a36:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0x134>)
 8000a50:	f000 fb5c 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <MX_GPIO_Init+0x138>)
 8000a6c:	f000 fb4e 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0x138>)
 8000a84:	f000 fb42 	bl	800110c <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	10110000 	.word	0x10110000
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_I2C_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d128      	bne.n	8000b70 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_I2C_MspInit+0x80>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <HAL_I2C_MspInit+0x80>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_I2C_MspInit+0x80>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <HAL_I2C_MspInit+0x84>)
 8000b54:	f000 fada 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_I2C_MspInit+0x80>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_I2C_MspInit+0x80>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_I2C_MspInit+0x80>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <HAL_UART_MspInit+0x114>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d146      	bne.n	8000c34 <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a3c      	ldr	r2, [pc, #240]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b3a      	ldr	r3, [pc, #232]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c00:	2308      	movs	r3, #8
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <HAL_UART_MspInit+0x11c>)
 8000c0c:	f000 fa7e 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c22:	2308      	movs	r3, #8
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <HAL_UART_MspInit+0x120>)
 8000c2e:	f000 fa6d 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c32:	e02d      	b.n	8000c90 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x124>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d128      	bne.n	8000c90 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_UART_MspInit+0x118>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c80:	2307      	movs	r3, #7
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <HAL_UART_MspInit+0x128>)
 8000c8c:	f000 fa3e 	bl	800110c <HAL_GPIO_Init>
}
 8000c90:	bf00      	nop
 8000c92:	3730      	adds	r7, #48	; 0x30
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40005000 	.word	0x40005000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	40020c00 	.word	0x40020c00

08000cb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cd0:	d141      	bne.n	8000d56 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4817      	ldr	r0, [pc, #92]	; (8000d64 <HAL_PCD_MspInit+0xb4>)
 8000d08:	f000 fa00 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4810      	ldr	r0, [pc, #64]	; (8000d64 <HAL_PCD_MspInit+0xb4>)
 8000d22:	f000 f9f3 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2a:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	6353      	str	r3, [r2, #52]	; 0x34
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f87e 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <SystemInit+0x28>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <SystemInit+0x28>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SystemInit+0x28>)
 8000dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dde:	609a      	str	r2, [r3, #8]
#endif
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000df4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000df6:	e003      	b.n	8000e00 <LoopCopyDataInit>

08000df8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dfe:	3104      	adds	r1, #4

08000e00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e08:	d3f6      	bcc.n	8000df8 <CopyDataInit>
  ldr  r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e0c:	e002      	b.n	8000e14 <LoopFillZerobss>

08000e0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e10:	f842 3b04 	str.w	r3, [r2], #4

08000e14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e18:	d3f9      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd3 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f003 f94f 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbef 	bl	8000604 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e2c:	080041c0 	.word	0x080041c0
  ldr  r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e34:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e38:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e3c:	200005c4 	.word	0x200005c4

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>

08000e42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 f92c 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f805 	bl	8000e5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f7ff fe2f 	bl	8000ab4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f939 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f90f 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	200005c0 	.word	0x200005c0

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200005c0 	.word	0x200005c0

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_Delay+0x40>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <__NVIC_SetPriorityGrouping+0x40>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x40>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	05fa0000 	.word	0x05fa0000

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff47 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5c 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb0 	bl	8001060 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e175      	b.n	8001418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8164 	bne.w	8001412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d00b      	beq.n	800116a <HAL_GPIO_Init+0x5e>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115e:	2b11      	cmp	r3, #17
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b12      	cmp	r3, #18
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x100>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b12      	cmp	r3, #18
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80be 	beq.w	8001412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <HAL_GPIO_Init+0x320>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a64      	ldr	r2, [pc, #400]	; (800142c <HAL_GPIO_Init+0x320>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_GPIO_Init+0x320>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ae:	4a60      	ldr	r2, [pc, #384]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_GPIO_Init+0x328>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d037      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a56      	ldr	r2, [pc, #344]	; (8001438 <HAL_GPIO_Init+0x32c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d031      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a55      	ldr	r2, [pc, #340]	; (800143c <HAL_GPIO_Init+0x330>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a54      	ldr	r2, [pc, #336]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x232>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a53      	ldr	r2, [pc, #332]	; (8001444 <HAL_GPIO_Init+0x338>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x33c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x22a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_GPIO_Init+0x340>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a50      	ldr	r2, [pc, #320]	; (8001450 <HAL_GPIO_Init+0x344>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <HAL_GPIO_Init+0x348>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <HAL_GPIO_Init+0x34c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x21a>
 8001322:	2309      	movs	r3, #9
 8001324:	e012      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001326:	230a      	movs	r3, #10
 8001328:	e010      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132a:	2308      	movs	r3, #8
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132e:	2307      	movs	r3, #7
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x240>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800135c:	4934      	ldr	r1, [pc, #208]	; (8001430 <HAL_GPIO_Init+0x324>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136a:	4b3c      	ldr	r3, [pc, #240]	; (800145c <HAL_GPIO_Init+0x350>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138e:	4a33      	ldr	r2, [pc, #204]	; (800145c <HAL_GPIO_Init+0x350>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_GPIO_Init+0x350>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b8:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_GPIO_Init+0x350>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_GPIO_Init+0x350>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_GPIO_Init+0x350>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_GPIO_Init+0x350>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800140c:	4a13      	ldr	r2, [pc, #76]	; (800145c <HAL_GPIO_Init+0x350>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae86 	bls.w	800112c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	3724      	adds	r7, #36	; 0x24
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40022000 	.word	0x40022000
 8001458:	40022400 	.word	0x40022400
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e07f      	b.n	80015a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fb1e 	bl	8000afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e006      	b.n	800151c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800151a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d104      	bne.n	800152e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_I2C_Init+0x11c>)
 800153a:	430b      	orrs	r3, r1
 800153c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800154c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	ea42 0103 	orr.w	r1, r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	021a      	lsls	r2, r3, #8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69d9      	ldr	r1, [r3, #28]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	02008000 	.word	0x02008000

080015b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	461a      	mov	r2, r3
 80015c0:	460b      	mov	r3, r1
 80015c2:	817b      	strh	r3, [r7, #10]
 80015c4:	4613      	mov	r3, r2
 80015c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	f040 80da 	bne.w	800178a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_I2C_Master_Transmit+0x30>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e0d3      	b.n	800178c <HAL_I2C_Master_Transmit+0x1d8>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ec:	f7ff fc7a 	bl	8000ee4 <HAL_GetTick>
 80015f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2319      	movs	r3, #25
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f9f8 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0be      	b.n	800178c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2221      	movs	r2, #33	; 0x21
 8001612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2210      	movs	r2, #16
 800161a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	893a      	ldrh	r2, [r7, #8]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163a:	b29b      	uxth	r3, r3
 800163c:	2bff      	cmp	r3, #255	; 0xff
 800163e:	d90e      	bls.n	800165e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	b2da      	uxtb	r2, r3
 800164c:	8979      	ldrh	r1, [r7, #10]
 800164e:	4b51      	ldr	r3, [pc, #324]	; (8001794 <HAL_I2C_Master_Transmit+0x1e0>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 faee 	bl	8001c38 <I2C_TransferConfig>
 800165c:	e06c      	b.n	8001738 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166c:	b2da      	uxtb	r2, r3
 800166e:	8979      	ldrh	r1, [r7, #10]
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_I2C_Master_Transmit+0x1e0>)
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 fadd 	bl	8001c38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800167e:	e05b      	b.n	8001738 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	6a39      	ldr	r1, [r7, #32]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f9f5 	bl	8001a74 <I2C_WaitOnTXISFlagUntilTimeout>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e07b      	b.n	800178c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d034      	beq.n	8001738 <HAL_I2C_Master_Transmit+0x184>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d130      	bne.n	8001738 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	2200      	movs	r2, #0
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f987 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e04d      	b.n	800178c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d90e      	bls.n	8001718 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	22ff      	movs	r2, #255	; 0xff
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	b2da      	uxtb	r2, r3
 8001706:	8979      	ldrh	r1, [r7, #10]
 8001708:	2300      	movs	r3, #0
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fa91 	bl	8001c38 <I2C_TransferConfig>
 8001716:	e00f      	b.n	8001738 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	b2da      	uxtb	r2, r3
 8001728:	8979      	ldrh	r1, [r7, #10]
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fa80 	bl	8001c38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d19e      	bne.n	8001680 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	6a39      	ldr	r1, [r7, #32]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f9d4 	bl	8001af4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e01a      	b.n	800178c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2220      	movs	r2, #32
 800175c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_I2C_Master_Transmit+0x1e4>)
 800176a:	400b      	ands	r3, r1
 800176c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800178a:	2302      	movs	r3, #2
  }
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	80002000 	.word	0x80002000
 8001798:	fe00e800 	.word	0xfe00e800

0800179c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	460b      	mov	r3, r1
 80017aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	f040 80ef 	bne.w	800199c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
 80017d0:	e0e5      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_I2C_IsDeviceReady+0x44>
 80017dc:	2302      	movs	r3, #2
 80017de:	e0de      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2224      	movs	r2, #36	; 0x24
 80017ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d105      	bne.n	800180a <HAL_I2C_IsDeviceReady+0x6e>
 80017fe:	897b      	ldrh	r3, [r7, #10]
 8001800:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_I2C_IsDeviceReady+0x20c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	e004      	b.n	8001814 <HAL_I2C_IsDeviceReady+0x78>
 800180a:	897b      	ldrh	r3, [r7, #10]
 800180c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001810:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fb63 	bl	8000ee4 <HAL_GetTick>
 800181e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b20      	cmp	r3, #32
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b10      	cmp	r3, #16
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800184c:	e034      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d01a      	beq.n	800188c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001856:	f7ff fb45 	bl	8000ee4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d302      	bcc.n	800186c <HAL_I2C_IsDeviceReady+0xd0>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10f      	bne.n	800188c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f043 0220 	orr.w	r2, r3, #32
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e088      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	2b20      	cmp	r3, #32
 8001898:	bf0c      	ite	eq
 800189a:	2301      	moveq	r3, #1
 800189c:	2300      	movne	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018b8:	7ffb      	ldrb	r3, [r7, #31]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_I2C_IsDeviceReady+0x128>
 80018be:	7fbb      	ldrb	r3, [r7, #30]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0c4      	beq.n	800184e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d01a      	beq.n	8001908 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	2120      	movs	r1, #32
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f889 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e058      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2220      	movs	r2, #32
 80018f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e04a      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	2120      	movs	r1, #32
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f86e 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e03d      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2210      	movs	r2, #16
 8001928:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2220      	movs	r2, #32
 8001930:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d118      	bne.n	800196c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001948:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	2120      	movs	r1, #32
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f84d 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01c      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2220      	movs	r2, #32
 800196a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	f63f af3d 	bhi.w	80017f6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f043 0220 	orr.w	r2, r3, #32
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	02002000 	.word	0x02002000

080019ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d103      	bne.n	80019ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d007      	beq.n	80019e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	619a      	str	r2, [r3, #24]
  }
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a04:	e022      	b.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d01e      	beq.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff fa69 	bl	8000ee4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d302      	bcc.n	8001a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d113      	bne.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e00f      	b.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4013      	ands	r3, r2
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d0cd      	beq.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a80:	e02c      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f870 	bl	8001b6c <I2C_IsAcknowledgeFailed>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e02a      	b.n	8001aec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d01e      	beq.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9e:	f7ff fa21 	bl	8000ee4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d113      	bne.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f043 0220 	orr.w	r2, r3, #32
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e007      	b.n	8001aec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d1cb      	bne.n	8001a82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b00:	e028      	b.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f830 	bl	8001b6c <I2C_IsAcknowledgeFailed>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e026      	b.n	8001b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7ff f9e5 	bl	8000ee4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d113      	bne.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e007      	b.n	8001b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	d1cf      	bne.n	8001b02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d151      	bne.n	8001c2a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b86:	e022      	b.n	8001bce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8e:	d01e      	beq.n	8001bce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b90:	f7ff f9a8 	bl	8000ee4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d302      	bcc.n	8001ba6 <I2C_IsAcknowledgeFailed+0x3a>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d113      	bne.n	8001bce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0220 	orr.w	r2, r3, #32
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e02e      	b.n	8001c2c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d1d5      	bne.n	8001b88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2210      	movs	r2, #16
 8001be2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2220      	movs	r2, #32
 8001bea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff fedd 	bl	80019ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <I2C_IsAcknowledgeFailed+0xc8>)
 8001bfe:	400b      	ands	r3, r1
 8001c00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f043 0204 	orr.w	r2, r3, #4
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	fe00e800 	.word	0xfe00e800

08001c38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	817b      	strh	r3, [r7, #10]
 8001c46:	4613      	mov	r3, r2
 8001c48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	0d5b      	lsrs	r3, r3, #21
 8001c54:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <I2C_TransferConfig+0x58>)
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	ea02 0103 	and.w	r1, r2, r3
 8001c62:	897b      	ldrh	r3, [r7, #10]
 8001c64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c68:	7a7b      	ldrb	r3, [r7, #9]
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	03ff63ff 	.word	0x03ff63ff

08001c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d138      	bne.n	8001d1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e032      	b.n	8001d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d139      	bne.n	8001db4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e033      	b.n	8001db6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e000      	b.n	8001db6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001db4:	2302      	movs	r3, #2
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc4:	b08f      	sub	sp, #60	; 0x3c
 8001dc6:	af0a      	add	r7, sp, #40	; 0x28
 8001dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e116      	b.n	8002002 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe ff5e 	bl	8000cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fefc 	bl	8003c10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	687e      	ldr	r6, [r7, #4]
 8001e20:	466d      	mov	r5, sp
 8001e22:	f106 0410 	add.w	r4, r6, #16
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e36:	1d33      	adds	r3, r6, #4
 8001e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3a:	6838      	ldr	r0, [r7, #0]
 8001e3c:	f001 fe90 	bl	8003b60 <USB_CoreInit>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0d7      	b.n	8002002 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 feea 	bl	8003c32 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e04a      	b.n	8001efa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	333d      	adds	r3, #61	; 0x3d
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	333c      	adds	r3, #60	; 0x3c
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	b298      	uxth	r0, r3
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3342      	adds	r3, #66	; 0x42
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	333f      	adds	r3, #63	; 0x3f
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3344      	adds	r3, #68	; 0x44
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	3348      	adds	r3, #72	; 0x48
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3350      	adds	r3, #80	; 0x50
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d3af      	bcc.n	8001e64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e044      	b.n	8001f94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	3301      	adds	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3b5      	bcc.n	8001f0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	687e      	ldr	r6, [r7, #4]
 8001fa6:	466d      	mov	r5, sp
 8001fa8:	f106 0410 	add.w	r4, r6, #16
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fbc:	1d33      	adds	r3, r6, #4
 8001fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc0:	6838      	ldr	r0, [r7, #0]
 8001fc2:	f001 fe61 	bl	8003c88 <USB_DevInit>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e014      	b.n	8002002 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f80b 	bl	800200c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 f813 	bl	8004026 <USB_DevDisconnect>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800200c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_PCDEx_ActivateLPM+0x44>)
 800203c:	4313      	orrs	r3, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	10000003 	.word	0x10000003

08002054 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_PWREx_EnableOverDrive+0x98>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_PWREx_EnableOverDrive+0x98>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_PWREx_EnableOverDrive+0x98>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020a2:	f7fe ff1f 	bl	8000ee4 <HAL_GetTick>
 80020a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020a8:	e009      	b.n	80020be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020aa:	f7fe ff1b 	bl	8000ee4 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b8:	d901      	bls.n	80020be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e022      	b.n	8002104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d1ee      	bne.n	80020aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d8:	f7fe ff04 	bl	8000ee4 <HAL_GetTick>
 80020dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020de:	e009      	b.n	80020f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020e0:	f7fe ff00 	bl	8000ee4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ee:	d901      	bls.n	80020f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e007      	b.n	8002104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002100:	d1ee      	bne.n	80020e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e29b      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8087 	beq.w	8002246 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002138:	4b96      	ldr	r3, [pc, #600]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b04      	cmp	r3, #4
 8002142:	d00c      	beq.n	800215e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002144:	4b93      	ldr	r3, [pc, #588]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d112      	bne.n	8002176 <HAL_RCC_OscConfig+0x62>
 8002150:	4b90      	ldr	r3, [pc, #576]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215c:	d10b      	bne.n	8002176 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06c      	beq.n	8002244 <HAL_RCC_OscConfig+0x130>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d168      	bne.n	8002244 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e275      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x7a>
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a83      	ldr	r2, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e02e      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x9c>
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7e      	ldr	r2, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7b      	ldr	r2, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b73      	ldr	r3, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a72      	ldr	r2, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6b      	ldr	r2, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fe76 	bl	8000ee4 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fe72 	bl	8000ee4 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e229      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b61      	ldr	r3, [pc, #388]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xe8>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fe62 	bl	8000ee4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fe5e 	bl	8000ee4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e215      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b57      	ldr	r3, [pc, #348]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x110>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d069      	beq.n	8002326 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x190>
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1e9      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	493d      	ldr	r1, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e040      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a38      	ldr	r2, [pc, #224]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fe14 	bl	8000ee4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe fe10 	bl	8000ee4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1c7      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4929      	ldr	r1, [pc, #164]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	e018      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fdf0 	bl	8000ee4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002308:	f7fe fdec 	bl	8000ee4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1a3      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d038      	beq.n	80023a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d019      	beq.n	800236e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fdcd 	bl	8000ee4 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234e:	f7fe fdc9 	bl	8000ee4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e180      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x23a>
 800236c:	e01a      	b.n	80023a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fdb3 	bl	8000ee4 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fdaf 	bl	8000ee4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d903      	bls.n	8002398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e166      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
 8002394:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a4 	beq.w	80024fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b8c      	ldr	r3, [pc, #560]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a88      	ldr	r2, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	4b83      	ldr	r3, [pc, #524]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023e6:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7f      	ldr	r2, [pc, #508]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fd77 	bl	8000ee4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7fe fd73 	bl	8000ee4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e12a      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x31a>
 8002420:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a6f      	ldr	r2, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x33c>
 8002436:	4b6b      	ldr	r3, [pc, #428]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a6a      	ldr	r2, [pc, #424]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a67      	ldr	r2, [pc, #412]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x35e>
 8002458:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a61      	ldr	r2, [pc, #388]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fd27 	bl	8000ee4 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fd23 	bl	8000ee4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0d8      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x386>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fd11 	bl	8000ee4 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fd0d 	bl	8000ee4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0c2      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a3c      	ldr	r2, [pc, #240]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80ae 	beq.w	8002660 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d06d      	beq.n	80025ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d14b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fcde 	bl	8000ee4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fcda 	bl	8000ee4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e091      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fcac 	bl	8000ee4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fca8 	bl	8000ee4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e05f      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x47c>
 80025ae:	e057      	b.n	8002660 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fc92 	bl	8000ee4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fc8e 	bl	8000ee4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e045      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4b0>
 80025e2:	e03d      	b.n	8002660 <HAL_RCC_OscConfig+0x54c>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025ec:	4b1f      	ldr	r3, [pc, #124]	; (800266c <HAL_RCC_OscConfig+0x558>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d030      	beq.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d129      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d122      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002622:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002624:	4293      	cmp	r3, r2
 8002626:	d119      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d10f      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0d0      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d910      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b67      	ldr	r3, [pc, #412]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 020f 	bic.w	r2, r3, #15
 800269e:	4965      	ldr	r1, [pc, #404]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d040      	beq.n	8002794 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d115      	bne.n	8002752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e073      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06b      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4936      	ldr	r1, [pc, #216]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7fe fbbe 	bl	8000ee4 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe fbba 	bl	8000ee4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e053      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d210      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 020f 	bic.w	r2, r3, #15
 80027aa:	4922      	ldr	r1, [pc, #136]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002802:	f000 f821 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002806:	4601      	mov	r1, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x1cc>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	fa21 f303 	lsr.w	r3, r1, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1d0>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fb1a 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00
 8002838:	40023800 	.word	0x40023800
 800283c:	08004198 	.word	0x08004198
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800285e:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d007      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x32>
 800286a:	2b08      	cmp	r3, #8
 800286c:	d008      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x38>
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 80b4 	bne.w	80029dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002876:	60bb      	str	r3, [r7, #8]
      break;
 8002878:	e0b3      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287a:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800287c:	60bb      	str	r3, [r7, #8]
      break;
 800287e:	e0b0      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002888:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800288a:	4b58      	ldr	r3, [pc, #352]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d04a      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	f04f 0400 	mov.w	r4, #0
 80028a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	ea03 0501 	and.w	r5, r3, r1
 80028ac:	ea04 0602 	and.w	r6, r4, r2
 80028b0:	4629      	mov	r1, r5
 80028b2:	4632      	mov	r2, r6
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	f04f 0400 	mov.w	r4, #0
 80028bc:	0154      	lsls	r4, r2, #5
 80028be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028c2:	014b      	lsls	r3, r1, #5
 80028c4:	4619      	mov	r1, r3
 80028c6:	4622      	mov	r2, r4
 80028c8:	1b49      	subs	r1, r1, r5
 80028ca:	eb62 0206 	sbc.w	r2, r2, r6
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	f04f 0400 	mov.w	r4, #0
 80028d6:	0194      	lsls	r4, r2, #6
 80028d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028dc:	018b      	lsls	r3, r1, #6
 80028de:	1a5b      	subs	r3, r3, r1
 80028e0:	eb64 0402 	sbc.w	r4, r4, r2
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	00e2      	lsls	r2, r4, #3
 80028ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028f2:	00d9      	lsls	r1, r3, #3
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	195b      	adds	r3, r3, r5
 80028fa:	eb44 0406 	adc.w	r4, r4, r6
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	0262      	lsls	r2, r4, #9
 8002908:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800290c:	0259      	lsls	r1, r3, #9
 800290e:	460b      	mov	r3, r1
 8002910:	4614      	mov	r4, r2
 8002912:	4618      	mov	r0, r3
 8002914:	4621      	mov	r1, r4
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f04f 0400 	mov.w	r4, #0
 800291c:	461a      	mov	r2, r3
 800291e:	4623      	mov	r3, r4
 8002920:	f7fd fc8a 	bl	8000238 <__aeabi_uldivmod>
 8002924:	4603      	mov	r3, r0
 8002926:	460c      	mov	r4, r1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e049      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292c:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	f04f 0400 	mov.w	r4, #0
 8002936:	f240 11ff 	movw	r1, #511	; 0x1ff
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	ea03 0501 	and.w	r5, r3, r1
 8002942:	ea04 0602 	and.w	r6, r4, r2
 8002946:	4629      	mov	r1, r5
 8002948:	4632      	mov	r2, r6
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f04f 0400 	mov.w	r4, #0
 8002952:	0154      	lsls	r4, r2, #5
 8002954:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002958:	014b      	lsls	r3, r1, #5
 800295a:	4619      	mov	r1, r3
 800295c:	4622      	mov	r2, r4
 800295e:	1b49      	subs	r1, r1, r5
 8002960:	eb62 0206 	sbc.w	r2, r2, r6
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	0194      	lsls	r4, r2, #6
 800296e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002972:	018b      	lsls	r3, r1, #6
 8002974:	1a5b      	subs	r3, r3, r1
 8002976:	eb64 0402 	sbc.w	r4, r4, r2
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	00e2      	lsls	r2, r4, #3
 8002984:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002988:	00d9      	lsls	r1, r3, #3
 800298a:	460b      	mov	r3, r1
 800298c:	4614      	mov	r4, r2
 800298e:	195b      	adds	r3, r3, r5
 8002990:	eb44 0406 	adc.w	r4, r4, r6
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	02a2      	lsls	r2, r4, #10
 800299e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029a2:	0299      	lsls	r1, r3, #10
 80029a4:	460b      	mov	r3, r1
 80029a6:	4614      	mov	r4, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	4621      	mov	r1, r4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f04f 0400 	mov.w	r4, #0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4623      	mov	r3, r4
 80029b6:	f7fd fc3f 	bl	8000238 <__aeabi_uldivmod>
 80029ba:	4603      	mov	r3, r0
 80029bc:	460c      	mov	r4, r1
 80029be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	60bb      	str	r3, [r7, #8]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029de:	60bb      	str	r3, [r7, #8]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	68bb      	ldr	r3, [r7, #8]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a18:	4601      	mov	r1, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4a03      	ldr	r2, [pc, #12]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	080041a8 	.word	0x080041a8

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a3c:	f7ff ffdc 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a40:	4601      	mov	r1, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0b5b      	lsrs	r3, r3, #13
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	080041a8 	.word	0x080041a8

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a88:	4b69      	ldr	r3, [pc, #420]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a68      	ldr	r2, [pc, #416]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a92:	6093      	str	r3, [r2, #8]
 8002a94:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	4964      	ldr	r1, [pc, #400]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d017      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	4959      	ldr	r1, [pc, #356]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad8:	d101      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d017      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002af6:	4b4e      	ldr	r3, [pc, #312]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	494a      	ldr	r1, [pc, #296]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 808b 	beq.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b50:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b5c:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe f9bc 	bl	8000ee4 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe f9b8 	bl	8000ee4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e38d      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d035      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d02e      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d114      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe f980 	bl	8000ee4 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe f97c 	bl	8000ee4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e34f      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ee      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c16:	d111      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c26:	400b      	ands	r3, r1
 8002c28:	4901      	ldr	r1, [pc, #4]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000
 8002c38:	0ffffcff 	.word	0x0ffffcff
 8002c3c:	4bb3      	ldr	r3, [pc, #716]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4ab2      	ldr	r2, [pc, #712]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c46:	6093      	str	r3, [r2, #8]
 8002c48:	4bb0      	ldr	r3, [pc, #704]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	49ad      	ldr	r1, [pc, #692]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c66:	4ba9      	ldr	r3, [pc, #676]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6c:	4aa7      	ldr	r2, [pc, #668]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c76:	4ba5      	ldr	r3, [pc, #660]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	49a2      	ldr	r1, [pc, #648]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c94:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca2:	499a      	ldr	r1, [pc, #616]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb6:	4b95      	ldr	r3, [pc, #596]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc4:	4991      	ldr	r1, [pc, #580]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd8:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce6:	4989      	ldr	r1, [pc, #548]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cfa:	4b84      	ldr	r3, [pc, #528]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4980      	ldr	r1, [pc, #512]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d1c:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	4978      	ldr	r1, [pc, #480]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f023 020c 	bic.w	r2, r3, #12
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4c:	496f      	ldr	r1, [pc, #444]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d60:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	4967      	ldr	r1, [pc, #412]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	495e      	ldr	r1, [pc, #376]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	4956      	ldr	r1, [pc, #344]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dc6:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	494d      	ldr	r1, [pc, #308]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002de8:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	4945      	ldr	r1, [pc, #276]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e0a:	4b40      	ldr	r3, [pc, #256]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e18:	493c      	ldr	r1, [pc, #240]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3a:	4934      	ldr	r1, [pc, #208]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d011      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5c:	492b      	ldr	r1, [pc, #172]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	491b      	ldr	r1, [pc, #108]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec0:	4912      	ldr	r1, [pc, #72]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee4:	4909      	ldr	r1, [pc, #36]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00f      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	4985      	ldr	r1, [pc, #532]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f24:	4b80      	ldr	r3, [pc, #512]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f34:	497c      	ldr	r1, [pc, #496]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f4a:	f040 80d6 	bne.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5a:	f7fd ffc3 	bl	8000ee4 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f62:	f7fd ffbf 	bl	8000ee4 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e194      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d021      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11d      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	019a      	lsls	r2, r3, #6
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	071b      	lsls	r3, r3, #28
 8002fc8:	4957      	ldr	r1, [pc, #348]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffa:	d129      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	0f1b      	lsrs	r3, r3, #28
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	019a      	lsls	r2, r3, #6
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	071b      	lsls	r3, r3, #28
 8003030:	493d      	ldr	r1, [pc, #244]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800303a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303e:	f023 021f 	bic.w	r2, r3, #31
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	3b01      	subs	r3, #1
 8003048:	4937      	ldr	r1, [pc, #220]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	0e1b      	lsrs	r3, r3, #24
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003070:	0f1b      	lsrs	r3, r3, #28
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	019a      	lsls	r2, r3, #6
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	431a      	orrs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	071b      	lsls	r3, r3, #28
 8003090:	4925      	ldr	r1, [pc, #148]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	019a      	lsls	r2, r3, #6
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	061b      	lsls	r3, r3, #24
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	071b      	lsls	r3, r3, #28
 80030c0:	4919      	ldr	r1, [pc, #100]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d4:	f7fd ff06 	bl	8000ee4 <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030dc:	f7fd ff02 	bl	8000ee4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0d7      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80cd 	bne.w	800329c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fd fee9 	bl	8000ee4 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003116:	f7fd fee5 	bl	8000ee4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d903      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0ba      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003128:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003138:	d0ed      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02e      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	019a      	lsls	r2, r3, #6
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	4944      	ldr	r1, [pc, #272]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800319e:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	493d      	ldr	r1, [pc, #244]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d022      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d11d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	0f1b      	lsrs	r3, r3, #28
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	431a      	orrs	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4929      	ldr	r1, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	0e1b      	lsrs	r3, r3, #24
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	019a      	lsls	r2, r3, #6
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4911      	ldr	r1, [pc, #68]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fd fe36 	bl	8000ee4 <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800327c:	f7fd fe32 	bl	8000ee4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e007      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d1ef      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e040      	b.n	8003340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fc58 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f82c 	bl	8003348 <UART_SetConfig>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 faca 	bl	800389c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fb51 	bl	80039e0 <UART_CheckIdleState>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4bb1      	ldr	r3, [pc, #708]	; (800363c <UART_SetConfig+0x2f4>)
 8003378:	4013      	ands	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	6939      	ldr	r1, [r7, #16]
 8003380:	430b      	orrs	r3, r1
 8003382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a9f      	ldr	r2, [pc, #636]	; (8003640 <UART_SetConfig+0x2f8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d121      	bne.n	800340c <UART_SetConfig+0xc4>
 80033c8:	4b9e      	ldr	r3, [pc, #632]	; (8003644 <UART_SetConfig+0x2fc>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d816      	bhi.n	8003404 <UART_SetConfig+0xbc>
 80033d6:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <UART_SetConfig+0x94>)
 80033d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033dc:	080033ed 	.word	0x080033ed
 80033e0:	080033f9 	.word	0x080033f9
 80033e4:	080033f3 	.word	0x080033f3
 80033e8:	080033ff 	.word	0x080033ff
 80033ec:	2301      	movs	r3, #1
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e151      	b.n	8003696 <UART_SetConfig+0x34e>
 80033f2:	2302      	movs	r3, #2
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e14e      	b.n	8003696 <UART_SetConfig+0x34e>
 80033f8:	2304      	movs	r3, #4
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e14b      	b.n	8003696 <UART_SetConfig+0x34e>
 80033fe:	2308      	movs	r3, #8
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e148      	b.n	8003696 <UART_SetConfig+0x34e>
 8003404:	2310      	movs	r3, #16
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	bf00      	nop
 800340a:	e144      	b.n	8003696 <UART_SetConfig+0x34e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a8d      	ldr	r2, [pc, #564]	; (8003648 <UART_SetConfig+0x300>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d134      	bne.n	8003480 <UART_SetConfig+0x138>
 8003416:	4b8b      	ldr	r3, [pc, #556]	; (8003644 <UART_SetConfig+0x2fc>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d829      	bhi.n	8003478 <UART_SetConfig+0x130>
 8003424:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0xe4>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	08003461 	.word	0x08003461
 8003430:	08003479 	.word	0x08003479
 8003434:	08003479 	.word	0x08003479
 8003438:	08003479 	.word	0x08003479
 800343c:	0800346d 	.word	0x0800346d
 8003440:	08003479 	.word	0x08003479
 8003444:	08003479 	.word	0x08003479
 8003448:	08003479 	.word	0x08003479
 800344c:	08003467 	.word	0x08003467
 8003450:	08003479 	.word	0x08003479
 8003454:	08003479 	.word	0x08003479
 8003458:	08003479 	.word	0x08003479
 800345c:	08003473 	.word	0x08003473
 8003460:	2300      	movs	r3, #0
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e117      	b.n	8003696 <UART_SetConfig+0x34e>
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e114      	b.n	8003696 <UART_SetConfig+0x34e>
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e111      	b.n	8003696 <UART_SetConfig+0x34e>
 8003472:	2308      	movs	r3, #8
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e10e      	b.n	8003696 <UART_SetConfig+0x34e>
 8003478:	2310      	movs	r3, #16
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	bf00      	nop
 800347e:	e10a      	b.n	8003696 <UART_SetConfig+0x34e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a71      	ldr	r2, [pc, #452]	; (800364c <UART_SetConfig+0x304>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d120      	bne.n	80034cc <UART_SetConfig+0x184>
 800348a:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <UART_SetConfig+0x2fc>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003494:	2b10      	cmp	r3, #16
 8003496:	d00f      	beq.n	80034b8 <UART_SetConfig+0x170>
 8003498:	2b10      	cmp	r3, #16
 800349a:	d802      	bhi.n	80034a2 <UART_SetConfig+0x15a>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <UART_SetConfig+0x164>
 80034a0:	e010      	b.n	80034c4 <UART_SetConfig+0x17c>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d005      	beq.n	80034b2 <UART_SetConfig+0x16a>
 80034a6:	2b30      	cmp	r3, #48	; 0x30
 80034a8:	d009      	beq.n	80034be <UART_SetConfig+0x176>
 80034aa:	e00b      	b.n	80034c4 <UART_SetConfig+0x17c>
 80034ac:	2300      	movs	r3, #0
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e0f1      	b.n	8003696 <UART_SetConfig+0x34e>
 80034b2:	2302      	movs	r3, #2
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e0ee      	b.n	8003696 <UART_SetConfig+0x34e>
 80034b8:	2304      	movs	r3, #4
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e0eb      	b.n	8003696 <UART_SetConfig+0x34e>
 80034be:	2308      	movs	r3, #8
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e0e8      	b.n	8003696 <UART_SetConfig+0x34e>
 80034c4:	2310      	movs	r3, #16
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	bf00      	nop
 80034ca:	e0e4      	b.n	8003696 <UART_SetConfig+0x34e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5f      	ldr	r2, [pc, #380]	; (8003650 <UART_SetConfig+0x308>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d120      	bne.n	8003518 <UART_SetConfig+0x1d0>
 80034d6:	4b5b      	ldr	r3, [pc, #364]	; (8003644 <UART_SetConfig+0x2fc>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d00f      	beq.n	8003504 <UART_SetConfig+0x1bc>
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d802      	bhi.n	80034ee <UART_SetConfig+0x1a6>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <UART_SetConfig+0x1b0>
 80034ec:	e010      	b.n	8003510 <UART_SetConfig+0x1c8>
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d005      	beq.n	80034fe <UART_SetConfig+0x1b6>
 80034f2:	2bc0      	cmp	r3, #192	; 0xc0
 80034f4:	d009      	beq.n	800350a <UART_SetConfig+0x1c2>
 80034f6:	e00b      	b.n	8003510 <UART_SetConfig+0x1c8>
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e0cb      	b.n	8003696 <UART_SetConfig+0x34e>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e0c8      	b.n	8003696 <UART_SetConfig+0x34e>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e0c5      	b.n	8003696 <UART_SetConfig+0x34e>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e0c2      	b.n	8003696 <UART_SetConfig+0x34e>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	bf00      	nop
 8003516:	e0be      	b.n	8003696 <UART_SetConfig+0x34e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a4d      	ldr	r2, [pc, #308]	; (8003654 <UART_SetConfig+0x30c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d124      	bne.n	800356c <UART_SetConfig+0x224>
 8003522:	4b48      	ldr	r3, [pc, #288]	; (8003644 <UART_SetConfig+0x2fc>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003530:	d012      	beq.n	8003558 <UART_SetConfig+0x210>
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d802      	bhi.n	800353e <UART_SetConfig+0x1f6>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <UART_SetConfig+0x204>
 800353c:	e012      	b.n	8003564 <UART_SetConfig+0x21c>
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d006      	beq.n	8003552 <UART_SetConfig+0x20a>
 8003544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003548:	d009      	beq.n	800355e <UART_SetConfig+0x216>
 800354a:	e00b      	b.n	8003564 <UART_SetConfig+0x21c>
 800354c:	2300      	movs	r3, #0
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e0a1      	b.n	8003696 <UART_SetConfig+0x34e>
 8003552:	2302      	movs	r3, #2
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e09e      	b.n	8003696 <UART_SetConfig+0x34e>
 8003558:	2304      	movs	r3, #4
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e09b      	b.n	8003696 <UART_SetConfig+0x34e>
 800355e:	2308      	movs	r3, #8
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e098      	b.n	8003696 <UART_SetConfig+0x34e>
 8003564:	2310      	movs	r3, #16
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	bf00      	nop
 800356a:	e094      	b.n	8003696 <UART_SetConfig+0x34e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a39      	ldr	r2, [pc, #228]	; (8003658 <UART_SetConfig+0x310>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d124      	bne.n	80035c0 <UART_SetConfig+0x278>
 8003576:	4b33      	ldr	r3, [pc, #204]	; (8003644 <UART_SetConfig+0x2fc>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003584:	d012      	beq.n	80035ac <UART_SetConfig+0x264>
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358a:	d802      	bhi.n	8003592 <UART_SetConfig+0x24a>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <UART_SetConfig+0x258>
 8003590:	e012      	b.n	80035b8 <UART_SetConfig+0x270>
 8003592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003596:	d006      	beq.n	80035a6 <UART_SetConfig+0x25e>
 8003598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800359c:	d009      	beq.n	80035b2 <UART_SetConfig+0x26a>
 800359e:	e00b      	b.n	80035b8 <UART_SetConfig+0x270>
 80035a0:	2301      	movs	r3, #1
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e077      	b.n	8003696 <UART_SetConfig+0x34e>
 80035a6:	2302      	movs	r3, #2
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e074      	b.n	8003696 <UART_SetConfig+0x34e>
 80035ac:	2304      	movs	r3, #4
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e071      	b.n	8003696 <UART_SetConfig+0x34e>
 80035b2:	2308      	movs	r3, #8
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e06e      	b.n	8003696 <UART_SetConfig+0x34e>
 80035b8:	2310      	movs	r3, #16
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	bf00      	nop
 80035be:	e06a      	b.n	8003696 <UART_SetConfig+0x34e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a25      	ldr	r2, [pc, #148]	; (800365c <UART_SetConfig+0x314>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d124      	bne.n	8003614 <UART_SetConfig+0x2cc>
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <UART_SetConfig+0x2fc>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d012      	beq.n	8003600 <UART_SetConfig+0x2b8>
 80035da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035de:	d802      	bhi.n	80035e6 <UART_SetConfig+0x29e>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <UART_SetConfig+0x2ac>
 80035e4:	e012      	b.n	800360c <UART_SetConfig+0x2c4>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ea:	d006      	beq.n	80035fa <UART_SetConfig+0x2b2>
 80035ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035f0:	d009      	beq.n	8003606 <UART_SetConfig+0x2be>
 80035f2:	e00b      	b.n	800360c <UART_SetConfig+0x2c4>
 80035f4:	2300      	movs	r3, #0
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e04d      	b.n	8003696 <UART_SetConfig+0x34e>
 80035fa:	2302      	movs	r3, #2
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e04a      	b.n	8003696 <UART_SetConfig+0x34e>
 8003600:	2304      	movs	r3, #4
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e047      	b.n	8003696 <UART_SetConfig+0x34e>
 8003606:	2308      	movs	r3, #8
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e044      	b.n	8003696 <UART_SetConfig+0x34e>
 800360c:	2310      	movs	r3, #16
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	bf00      	nop
 8003612:	e040      	b.n	8003696 <UART_SetConfig+0x34e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <UART_SetConfig+0x318>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d139      	bne.n	8003692 <UART_SetConfig+0x34a>
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <UART_SetConfig+0x2fc>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362c:	d027      	beq.n	800367e <UART_SetConfig+0x336>
 800362e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003632:	d817      	bhi.n	8003664 <UART_SetConfig+0x31c>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <UART_SetConfig+0x32a>
 8003638:	e027      	b.n	800368a <UART_SetConfig+0x342>
 800363a:	bf00      	nop
 800363c:	efff69f3 	.word	0xefff69f3
 8003640:	40011000 	.word	0x40011000
 8003644:	40023800 	.word	0x40023800
 8003648:	40004400 	.word	0x40004400
 800364c:	40004800 	.word	0x40004800
 8003650:	40004c00 	.word	0x40004c00
 8003654:	40005000 	.word	0x40005000
 8003658:	40011400 	.word	0x40011400
 800365c:	40007800 	.word	0x40007800
 8003660:	40007c00 	.word	0x40007c00
 8003664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003668:	d006      	beq.n	8003678 <UART_SetConfig+0x330>
 800366a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800366e:	d009      	beq.n	8003684 <UART_SetConfig+0x33c>
 8003670:	e00b      	b.n	800368a <UART_SetConfig+0x342>
 8003672:	2300      	movs	r3, #0
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e00e      	b.n	8003696 <UART_SetConfig+0x34e>
 8003678:	2302      	movs	r3, #2
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e00b      	b.n	8003696 <UART_SetConfig+0x34e>
 800367e:	2304      	movs	r3, #4
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e008      	b.n	8003696 <UART_SetConfig+0x34e>
 8003684:	2308      	movs	r3, #8
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e005      	b.n	8003696 <UART_SetConfig+0x34e>
 800368a:	2310      	movs	r3, #16
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	bf00      	nop
 8003690:	e001      	b.n	8003696 <UART_SetConfig+0x34e>
 8003692:	2310      	movs	r3, #16
 8003694:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369e:	d17f      	bne.n	80037a0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80036a0:	7ffb      	ldrb	r3, [r7, #31]
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d85c      	bhi.n	8003760 <UART_SetConfig+0x418>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0x364>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036d1 	.word	0x080036d1
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	08003711 	.word	0x08003711
 80036b8:	08003761 	.word	0x08003761
 80036bc:	08003729 	.word	0x08003729
 80036c0:	08003761 	.word	0x08003761
 80036c4:	08003761 	.word	0x08003761
 80036c8:	08003761 	.word	0x08003761
 80036cc:	08003749 	.word	0x08003749
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d0:	f7ff f99e 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	005a      	lsls	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	61bb      	str	r3, [r7, #24]
        break;
 80036ee:	e03a      	b.n	8003766 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7ff f9a2 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 80036f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	005a      	lsls	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	61bb      	str	r3, [r7, #24]
        break;
 800370e:	e02a      	b.n	8003766 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	085a      	lsrs	r2, r3, #1
 8003716:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <UART_SetConfig+0x54c>)
 8003718:	4413      	add	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6852      	ldr	r2, [r2, #4]
 800371e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	61bb      	str	r3, [r7, #24]
        break;
 8003726:	e01e      	b.n	8003766 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003728:	f7ff f88e 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 800372c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	005a      	lsls	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	b29b      	uxth	r3, r3
 8003744:	61bb      	str	r3, [r7, #24]
        break;
 8003746:	e00e      	b.n	8003766 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	b29b      	uxth	r3, r3
 800375c:	61bb      	str	r3, [r7, #24]
        break;
 800375e:	e002      	b.n	8003766 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
        break;
 8003764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d916      	bls.n	800379a <UART_SetConfig+0x452>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d212      	bcs.n	800379a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f023 030f 	bic.w	r3, r3, #15
 800377c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	b29a      	uxth	r2, r3
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	4313      	orrs	r3, r2
 800378e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	897a      	ldrh	r2, [r7, #10]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e070      	b.n	800387c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
 800379e:	e06d      	b.n	800387c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d859      	bhi.n	800385a <UART_SetConfig+0x512>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <UART_SetConfig+0x464>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037ef 	.word	0x080037ef
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	0800385b 	.word	0x0800385b
 80037bc:	08003825 	.word	0x08003825
 80037c0:	0800385b 	.word	0x0800385b
 80037c4:	0800385b 	.word	0x0800385b
 80037c8:	0800385b 	.word	0x0800385b
 80037cc:	08003843 	.word	0x08003843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7ff f91e 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80037d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085a      	lsrs	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	441a      	add	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	61bb      	str	r3, [r7, #24]
        break;
 80037ec:	e038      	b.n	8003860 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ee:	f7ff f923 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 80037f2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	085a      	lsrs	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	b29b      	uxth	r3, r3
 8003808:	61bb      	str	r3, [r7, #24]
        break;
 800380a:	e029      	b.n	8003860 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	085a      	lsrs	r2, r3, #1
 8003812:	4b21      	ldr	r3, [pc, #132]	; (8003898 <UART_SetConfig+0x550>)
 8003814:	4413      	add	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6852      	ldr	r2, [r2, #4]
 800381a:	fbb3 f3f2 	udiv	r3, r3, r2
 800381e:	b29b      	uxth	r3, r3
 8003820:	61bb      	str	r3, [r7, #24]
        break;
 8003822:	e01d      	b.n	8003860 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003824:	f7ff f810 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8003828:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085a      	lsrs	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	b29b      	uxth	r3, r3
 800383e:	61bb      	str	r3, [r7, #24]
        break;
 8003840:	e00e      	b.n	8003860 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	b29b      	uxth	r3, r3
 8003856:	61bb      	str	r3, [r7, #24]
        break;
 8003858:	e002      	b.n	8003860 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	75fb      	strb	r3, [r7, #23]
        break;
 800385e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d908      	bls.n	8003878 <UART_SetConfig+0x530>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d204      	bcs.n	8003878 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e001      	b.n	800387c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	01e84800 	.word	0x01e84800
 8003898:	00f42400 	.word	0x00f42400

0800389c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d10a      	bne.n	80039b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039ee:	f7fd fa79 	bl	8000ee4 <HAL_GetTick>
 80039f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d10e      	bne.n	8003a20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f82a 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e020      	b.n	8003a62 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d10e      	bne.n	8003a4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f814 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e00a      	b.n	8003a62 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	e05d      	b.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d059      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fd fa2e 	bl	8000ee4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11b      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e042      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02b      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aee:	d123      	bne.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e00f      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d092      	beq.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b60:	b084      	sub	sp, #16
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	f107 001c 	add.w	r0, r7, #28
 8003b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d120      	bne.n	8003bba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <USB_CoreInit+0xac>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa52 	bl	8004058 <USB_CoreReset>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e010      	b.n	8003bdc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa46 	bl	8004058 <USB_CoreReset>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10b      	bne.n	8003bfa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f043 0206 	orr.w	r2, r3, #6
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c06:	b004      	add	sp, #16
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	ffbdffbf 	.word	0xffbdffbf

08003c10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 0201 	bic.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	e00b      	b.n	8003c76 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	e001      	b.n	8003c76 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e003      	b.n	8003c7e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003c76:	2032      	movs	r0, #50	; 0x32
 8003c78:	f7fd f940 	bl	8000efc <HAL_Delay>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c88:	b084      	sub	sp, #16
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e009      	b.n	8003cbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3340      	adds	r3, #64	; 0x40
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b0e      	cmp	r3, #14
 8003cc0:	d9f2      	bls.n	8003ca8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11c      	bne.n	8003d02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e005      	b.n	8003d0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d20:	4619      	mov	r1, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d28:	461a      	mov	r2, r3
 8003d2a:	680b      	ldr	r3, [r1, #0]
 8003d2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10c      	bne.n	8003d4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f959 	bl	8003ff4 <USB_SetDevSpeed>
 8003d42:	e018      	b.n	8003d76 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d44:	2101      	movs	r1, #1
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f954 	bl	8003ff4 <USB_SetDevSpeed>
 8003d4c:	e013      	b.n	8003d76 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d10c      	bne.n	8003d6e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f949 	bl	8003ff4 <USB_SetDevSpeed>
 8003d62:	e008      	b.n	8003d76 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d64:	2101      	movs	r1, #1
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f944 	bl	8003ff4 <USB_SetDevSpeed>
 8003d6c:	e003      	b.n	8003d76 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d6e:	2103      	movs	r1, #3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f93f 	bl	8003ff4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d76:	2110      	movs	r1, #16
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8f3 	bl	8003f64 <USB_FlushTxFifo>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f911 	bl	8003fb0 <USB_FlushRxFifo>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	461a      	mov	r2, r3
 8003dac:	2300      	movs	r3, #0
 8003dae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	461a      	mov	r2, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	e043      	b.n	8003e4a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd8:	d118      	bne.n	8003e0c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	461a      	mov	r2, r3
 8003dee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	e013      	b.n	8003e1e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e02:	461a      	mov	r2, r3
 8003e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e008      	b.n	8003e1e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	3301      	adds	r3, #1
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3b7      	bcc.n	8003dc2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	e043      	b.n	8003ee0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e6e:	d118      	bne.n	8003ea2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	461a      	mov	r2, r3
 8003e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e013      	b.n	8003eb4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	461a      	mov	r2, r3
 8003e9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	e008      	b.n	8003eb4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ed8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	3301      	adds	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3b7      	bcc.n	8003e58 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003efa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f043 0210 	orr.w	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <USB_DevInit+0x2d4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f043 0208 	orr.w	r2, r3, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <USB_DevInit+0x2d8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f58:	b004      	add	sp, #16
 8003f5a:	4770      	bx	lr
 8003f5c:	803c3800 	.word	0x803c3800
 8003f60:	40000004 	.word	0x40000004

08003f64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	f043 0220 	orr.w	r2, r3, #32
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <USB_FlushTxFifo+0x48>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e006      	b.n	8003f9e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d0f0      	beq.n	8003f7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	00030d40 	.word	0x00030d40

08003fb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <USB_FlushRxFifo+0x40>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e006      	b.n	8003fe2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d0f0      	beq.n	8003fc2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	00030d40 	.word	0x00030d40

08003ff4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004046:	2003      	movs	r0, #3
 8004048:	f7fc ff58 	bl	8000efc <HAL_Delay>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3301      	adds	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a13      	ldr	r2, [pc, #76]	; (80040bc <USB_CoreReset+0x64>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e01b      	b.n	80040ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	daf2      	bge.n	8004064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <USB_CoreReset+0x64>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e006      	b.n	80040ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d0f0      	beq.n	800408e <USB_CoreReset+0x36>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	00030d40 	.word	0x00030d40

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4e0d      	ldr	r6, [pc, #52]	; (80040f8 <__libc_init_array+0x38>)
 80040c4:	4c0d      	ldr	r4, [pc, #52]	; (80040fc <__libc_init_array+0x3c>)
 80040c6:	1ba4      	subs	r4, r4, r6
 80040c8:	10a4      	asrs	r4, r4, #2
 80040ca:	2500      	movs	r5, #0
 80040cc:	42a5      	cmp	r5, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	4e0b      	ldr	r6, [pc, #44]	; (8004100 <__libc_init_array+0x40>)
 80040d2:	4c0c      	ldr	r4, [pc, #48]	; (8004104 <__libc_init_array+0x44>)
 80040d4:	f000 f820 	bl	8004118 <_init>
 80040d8:	1ba4      	subs	r4, r4, r6
 80040da:	10a4      	asrs	r4, r4, #2
 80040dc:	2500      	movs	r5, #0
 80040de:	42a5      	cmp	r5, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e8:	4798      	blx	r3
 80040ea:	3501      	adds	r5, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f2:	4798      	blx	r3
 80040f4:	3501      	adds	r5, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	080041b8 	.word	0x080041b8
 80040fc:	080041b8 	.word	0x080041b8
 8004100:	080041b8 	.word	0x080041b8
 8004104:	080041bc 	.word	0x080041bc

08004108 <memset>:
 8004108:	4402      	add	r2, r0
 800410a:	4603      	mov	r3, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <_init>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr

08004124 <_fini>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr
